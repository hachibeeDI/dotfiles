[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_add = '''
    " Use deoplete.
    let g:deoplete#enable_at_startup = 1
    " Use smartcase.
    let g:deoplete#enable_smart_case = 1
'''
hook_source = '''
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"

    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function() abort
      return deoplete#close_popup() . "\<CR>"
    endfunction

    inoremap <expr><tab> pumvisible() ? "\<C-n>" :
          \ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''

[[plugins]]
repo = 'roxma/nvim-yarp'


[[plugins]]
repo = 'nixprime/cpsm'
    [plugins.build]
    unix = 'sh -c "PY3=ON ./install.sh"'
    mac = 'sh -c "PY3=ON ./install.sh"'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_i = 1
hook_add = '''
    nnoremap <SID>[Denite] <Nop>
    nmap ,d <SID>[Denite]
    " nnoremap <SID>[UMenu] <Nop>
    " nmap [Denite]t <SID>[UMenu]
    "
    " nnoremap <silent>[UMenu]g :Denite -silent -start-insert menu:git<CR>
    "
    " バッファ一覧
    nnoremap <silent> <SID>[Denite]b :<C-u>Denite buffer<CR>
    "
    " ファイル一覧
    nnoremap <silent> <SID>[Denite]f :<C-u>DeniteBufferDir file<CR>
    " .gitを基準にしたプロジェクト一覧 (ctrlp的な)
    nnoremap <silent> <SID>[Denite]p :<C-u>Denite `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`<CR>
    nnoremap <silent> <D-p>          :<C-u>Denite `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`<CR>

    " " レジスタ一覧
    " nnoremap <silent> <SID>[Denite]r :<C-u>Denite -buffer-name=register register<CR>
    " " 最近使用したファイル一覧
    nnoremap <silent> <SID>[Denite]m :<C-u>Denite file_mru<CR>
    " " 常用セット
    nnoremap <silent> <SID>[Denite]u :<C-u>Denite buffer file_mru<CR>
    nnoremap <silent> <D-m>          :<C-u>Denite buffer file_mru<CR>
    " " タブ一覧
    " nnoremap <silent> <SID>[Denite]t :<C-u>Denite tab<CR>
    " " 全部乗せ
    " nnoremap <silent> <SID>[Denite]a :<C-u>DeniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
    "
    " " その他
    " nnoremap <silent> <SID>[Denite]` :<C-u>Denite -auto-quit neobundle/update<CR>
    " " Outline
    " nnoremap <silent> <SID>[Denite]o :<C-u>Denite -vertical outline<CR>
    " " grep
    " nnoremap <silent> <SID>[Denite]gg :<C-u>Denite giti<CR>
    " nnoremap <silent> <SID>[Denite]gs :<C-u>Denite giti/status<CR>
    " nnoremap <silent> <SID>[Denite]gb :<C-u>Denite giti/branch<CR>
    " " quickfix
    " nnoremap <silent> <SID>[Denite]q :<C-u>Denite -no-quit -direction=botright quickfix
    " " }}}


    autocmd FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
      nnoremap <silent><buffer><expr> <CR>
      \ denite#do_map('do_action')
      nnoremap <silent><buffer><expr> d
      \ denite#do_map('do_action', 'delete')
      nnoremap <silent><buffer><expr> p
      \ denite#do_map('do_action', 'preview')
      nnoremap <silent><buffer><expr> q
      \ denite#do_map('quit')
      nnoremap <silent><buffer><expr> i
      \ denite#do_map('open_filter_buffer')
      nnoremap <silent><buffer><expr> <Space>
      \ denite#do_map('toggle_select').'j'
    endfunction

    autocmd FileType denite-filter call s:denite_filter_my_settings()
    function! s:denite_filter_my_settings() abort
      imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
    endfunction

'''
hook_post_source = '''
    " Change mappings.
    call denite#custom#map(
    \ 'insert',
    \ '<C-n>',
    \ '<denite:move_to_next_line>',
    \ 'noremap'
    \)
    call denite#custom#map(
    \ 'insert',
    \ '<C-p>',
    \ '<denite:move_to_previous_line>',
    \ 'noremap'
    \)

    " Change matchers.
    call denite#custom#source('file_mru', 'matchers', ['matcher_fuzzy', 'matcher_project_files'])
    call denite#custom#source('file_mru', 'converters', ['converter_relative_word'])
    call denite#custom#source('file_rec', 'matchers', ['matcher_cpsm'])

    call denite#custom#alias('source', 'file/rec/git', 'file/rec')
    call denite#custom#var('file/rec/git', 'command', ['git', 'ls-files', '-co', '--exclude-standard'])

    " Change ignore_globs
    call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
    \ ['.git/', '.ropeproject/', '*.pyc', '__pycache__/', 'venv/', 'images/', '*.min.*', 'img/', 'fonts/',
    \  'node_modules/', '.mypy_cache/'
    \ ])

    call denite#custom#var('outline', 'ignore_types', ['i'])

    " git grep command on grep source
    call denite#custom#var('grep', 'command', ['git'])
    call denite#custom#var('grep', 'default_opts', ['grep', '-n', '--no-color'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', ['-e'])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

[[plugins]]
repo = 'machakann/vim-highlightedyank'

[[plugins]]
repo = 'mhartington/nvim-typescript'
build = './install.sh'
hook_add = '''
g:nvim_typescript#type_info_on_hold = 1
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_statusline_format = ['E%d', 'W%d', 'OK']

    " nmap <silent> <C-w>j <Plug>(ale_next_wrap)
    " nmap <silent> <C-w>k <Plug>(ale_previous_wrap)

    let g:ale_fixers = {
    \ 'reason': ['refmt'],
    \ 'typescript': ['tslint'],
    \ 'javascript': ['eslint'],
    \ 'javascript.jsx': ['eslint'],
    \ }
    let g:ale_typescript_tslint_use_global = 0
    let g:ale_typescript_tslint_config_path = 0

    set signcolumn=yes
    " ファイル保存時に実行
    let g:ale_fix_on_save = 1
    let g:ale_sign_column_always = 1
    let g:ale_lint_on_enter = 0
    " Write this in your vimrc file
    let g:ale_lint_on_text_changed = 'never'
'''

hook_source = '''
    :set signcolumn=yes
'''



[[plugins]]
repo = 'reasonml-editor/vim-reason-plus'
