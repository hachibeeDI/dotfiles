# [[plugins]]
# repo = 'Shougo/neobundle.vim'
# fetch = 1
# base = '~/.vim'
#


# hook_add = '''
# '''

[[plugins]]
repo = 'Shougo/vimproc.vim'

    [plugins.build]
    windows = 'tools\\update-dll-mingw'
    cygwin = 'make -f make_cygwin.mak'
    mac = 'make -f make_mac.mak'
    unix = 'make -f make_unix.mak'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neco-syntax'
on_event = 'InsertEnter'

[[plugins]]
repo = 'Shougo/neosnippet'
on_map = '<Plug>(neosnippet_'
on_cmd = 'NeoSnippetClearMarkers'
on_func = 'neosnippet'
hook_source = '''
  autocmd MyAutoCmd InsertLeave * :NeoSnippetClearMarkers
'''
hook_add = '''
  " Enable snipMate compatibility feature.
  let g:neosnippet#enable_snipmate_compatibility = 1
  " tell neosnippet about my snippets
  let g:neosnippet#snippets_directory = '~/.vim/snippets'

  " plugin key-mappings.
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_event = 'InsertEnter'


[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_event = 'InsertEnter'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
on_map = ['nxo', '<Plug>(quickrun)', '<Plug>(quickrun-op)']
hook_add = '''
    let g:quickrun_no_default_key_mappings = 1
'''
hook_source = '''
    "nmap <F5> <Plug>(quickrun)
    nmap <Leader>q <Plug>(quickrun)
    nmap ,q <Plug>(quickrun-op)

    " }}}
'''

[[plugins]]
repo = 'airblade/vim-rooter'
on_map = ['<Plug>RooterChangeToRootDirectory']
on_cmd = ['Rooter']
hook_add = '''
  let g:rooter_manual_only = 1
  let g:rooter_disable_map = 1
  nmap <silent> <unique> <Space>rt <Plug>RooterChangeToRootDirectory
'''

# Git {{{
[[plugins]]
repo = 'lambdalisue/gina.vim'
on_event = 'InsertEnter'

[[plugins]]
repo = 'rhysd/committia.vim'

[[plugins]]
repo = 'rhysd/github-complete.vim'
on_ft = ['markdown', 'gitcommit']
# }}}

[[plugins]]
# improved from 'jceb/vim-hier'
repo = 'cohama/vim-hier'

[[plugins]]
repo = 'dannyob/quickfixstatus'

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['Tagbar', 'TagbarToggle']
hook_add = '''
    nnoremap <Space>T :<C-u>Tagbar<CR>
'''

[[plugins]]
repo = 'cohama/lexima.vim'
#on_func = 'lexima#add_rule'
lazy = 0


[[plugins]]
repo = 'hachibeeDI/smartinput-patterns'
depends = 'lexima.vim'
on_event = 'InsertEnter'
hook_post_source = '''
    call g:lexima_patterns#init()
'''

[[plugins]]
repo = 'kana/vim-smartchr'
on_func = 'smartchr'

[[plugins]]
repo = 'goldfeld/vim-seek'

[[plugins]]
repo = 'sjl/gundo.vim'
on_cmd = ['GundoToggle']
hook_add = '''
    nnoremap U :<C-u>GundoToggle<CR>
'''

[[plugins]]
repo = 'tpope/vim-classpath'
on_ft = ['scala', 'clojure', 'java']

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'vim-scripts/IndentAnything'
on_ft = ['html', 'xhtml', 'htmldjango', 'play2-html']

[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_source = '''
  let g:lightline = {
  \   'component': {
  \     'virtualenv': 'venv => %{&filetype=="python"?"":virtualenv#statusline()}',
  \     'readonly': '%{&readonly?"ro":""}',
  \     'cursorsyntax': '%{synIDattr(synID(line("."), col("."), 0), "name")}'
  \   },
  \   'component_function': {
  \     'fugitive': 'MyFugitive',
  \     'filename': 'MyFilename',
  \     'vaxe': 'MyVaxe',
  \   },
  \   'separator': {'left': '', 'right': '' },
  \   'subseparator': {'left': '|', 'right': '|'},
  \   'active': {
  \     'left': [
  \           ['mode', 'paste'], ['readonly', 'filename', 'modified'], ['vaxe', 'virtualenv']],
  \     'right': [['percent', 'lineinfo'], ['fileformat', 'fileencoding', 'filetype'], ['cursorsyntax']],
  \   },
  \   'enable': {
  \     'tabline': 0
  \   },
  \ }

  function! MyModified()
    return &filetype =~# 'help\|vimfiler\|gundo\|qf' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! MyReadonly()
    return &filetype !~? 'help\|vimfiler\|gundo\|qf' && &ro ? '錠' : ''
  endfunction

  function! MyFilename()
    return ('' !=# MyReadonly() ? MyReadonly() . ' ' : '') .
          \ (&filetype ==# 'vimfiler' ? vimfiler#get_status_string() :
          \  &filetype ==# 'unite' ? unite#get_status_string() :
          \  &filetype ==# 'qf' ? 'quickfix' :
          \  &filetype ==# 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
          \ '' !=? expand('%:t') ? expand('%:t') : '[No Name]') .
          \ ('' !=# MyModified() ? ' ' . MyModified() : '')
  endfunction

  function! MyFugitive()
    try
      if &filetype !~? 'vimfiler\|gundo\|qf' && exists('*fugitive#head')
        let _ = fugitive#head()
        return strlen(_) ? '梗'._ : ''
      endif
    catch
    endtry
    return ''
  endfunction

  function! MyVaxe()
    if &filetype ==# 'haxe'
      return pathshorten(fnamemodify(vaxe#CurrentBuild(), ':p:.')) . ' =>[' . vaxe#CurrentBuildPlatform() . ']'
    else
      return ''
    endif
  endfunction
'''

[[plugins]]
repo = 'LeafCage/foldCC'
# on_func = ['FoldCCtext']
hook_add = 'set foldtext=FoldCCtext()'

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]]
repo = 'andviro/flake8-vim'
on_ft = 'python'
hook_add = '''
  " Flake8-vim {{{
  let g:PyFlakeForcePyVersion = 3
  let g:PyFlakeOnWrite = 1
  " 無視する警告の種類
  " E501 => 行ごとの文字数制限, E121 => 次行のインデントはひとつだけ, E303 => 改行の数が多すぎる, E309 => クラスの後は一行あける（コメント書けないじゃん）
  let g:PyFlakeDisabledMessages = 'E501,E121,E303,E309'
  " エラー行のマーカー。hierあればいらねー
  let g:PyFlakeSigns = 0
  " flake8-autoをかけるためのコマンド。visual-modeでの範囲選択に対応
  let g:PyFlakeRangeCommand = 'Q'
  let g:PyFlakeCheckers = 'pep8,mccabe,frosted'
  " McCabe複雑度の最大値
  let g:PyFlakeDefaultComplexity=10
  " Be aggressive for autopep8
  let g:PyFlakeAggressive = 1
'''

[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'
on_ft = ['html', 'jinja']

[[plugins]]
repo = 'hachibeeDI/python_hl_lvar.vim'
on_ft = 'python'
hook_source = '''
  autocmd MyAutoCmd BufWinEnter  *.py PyHlLVar
  autocmd MyAutoCmd BufWinLeave  *.py PyHlLVar
  autocmd MyAutoCmd WinEnter     *.py PyHlLVar
  autocmd MyAutoCmd BufWritePost *.py PyHlLVar
  autocmd MyAutoCmd WinLeave     *.py PyHlLVar
  autocmd MyAutoCmd TabEnter     *.py PyHlLVar
  autocmd MyAutoCmd TabLeave     *.py PyHlLVar
'''
hook_add = '''
  let g:py_hl_lvar_force_version = 3
  let g:enable_python_hl_lvar = 1
  let g:python_hl_lvar_highlight_color = 'guifg=palegreen2 gui=NONE ctermfg=110 cterm=NONE'
  "let g:python_hl_lvar_verbose = 1  for debug
'''

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = 'python'
# {'name': 'VirtualEnvActivate', 'complete': 'customlist,virtualenv#names'},
on_cmd = [
    'VirtualEnvDeactivate',
    'VirtualEnvList',
    'VirtualEnvActivate',
]

[[plugins]]
repo = 'heavenshell/vim-misspell'
on_func = 'misspell'
on_cmd = ['Misspell']

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
  nmap <Space>m <Plug>(quickhl-manual-this)
  xmap <Space>m <Plug>(quickhl-manual-this)

  nmap <Space>M <Plug>(quickhl-manual-reset)
  xmap <Space>M <Plug>(quickhl-manual-reset)

  nmap <F9>     <Plug>(quickhl-manual-toggle)
  xmap <F9>     <Plug>(quickhl-manual-toggle)

  nmap <Space>j <Plug>(quickhl-cword-toggle)

  nmap <Space>] <Plug>(quickhl-tag-toggle)

  map H <Plug>(operator-quickhl-manual-this-motion)
'''


[[plugins]]
repo = 'godlygeek/tabular'


# Colorshema {{{
[[plugins]]
repo = 'vim-scripts/Colour-Sampler-Pack'

[[plugins]]
repo = 'dracula/vim'

[[plugins]]
repo = 'lu-ren/SerialExperimentsLain'

[[plugins]]
repo = 'altercation/vim-colors-solarized'
# }}}

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'kana/vim-metarw'

# JS {{{

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

[[plugins]]
# Yet Another syntax. not contains indent
repo = 'othree/yajs.vim'
on_ft = ['javascript', 'jsx', 'javascript.jsx']

[[plugins]]
# This syntax file is for ECMAScript future syntax. Need to work with yajs.vim.
repo = 'othree/es.next.syntax.vim'
on_ft = ['javascript', 'jsx', 'javascript.jsx']

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = ['html', 'xhtml', 'jinja', 'coffee', 'javascript', 'jsx', 'javascript.jsx', 'typescript']
hook_add = '''
    let g:used_javascript_libs = 'react,flux'
'''

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
# just add jsx syntax so I need base syntax plugin that's yajs
repo = 'mxw/vim-jsx'
on_ft = ['javascript', 'jsx', 'javascript.jsx']
hook_add = '''
  let g:jsx_ext_required = 1
  let g:jsx_pragma_required = 0
'''
# }}}

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# Ruby {{{

[[plugins]]
repo = 'vim-scripts/ruby-matchit'
on_ft = ['ruby', 'eruby', 'haml']

[[plugins]]
repo = 'skwp/vim-rspec'
on_ft = ['ruby', 'eruby', 'haml']

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = ['ruby']
# }}}

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_source = '''
  au FileType go nmap <leader>r <Plug>(go-run)
  au FileType go nmap <leader>b <Plug>(go-build)
  au FileType go nmap <leader>t <Plug>(go-test)
  au FileType go nmap <leader>c <Plug>(go-coverage)

  au FileType go nmap <Leader>ds <Plug>(go-def-split)
  au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
  au FileType go nmap <Leader>dt <Plug>(go-def-tab)
  au FileType go nmap <Leader>e <Plug>(go-rename)

  au MyAutoCmd FileType go nmap <Leader>s <Plug>(go-implements)
  au MyAutoCmd FileType go nmap <Leader>i <Plug>(go-info)
'''
hook_add = '''
  let g:go_auto_type_info = 1
  let g:go_fmt_command = 'goimports'

  let g:go_bin_path = expand('~/.go/bin')
  let g:go_fmt_fail_silently = 1
  let g:go_fmt_autosave = 1
  " let g:go_disable_autoinstall = 1
  let g:go_snippet_engine = 'neosnippet'

  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_structs = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_build_constraints = 1
'''

# -- markup {{{
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'xhtml', 'htmldjango', 'play2-html',  'eruby', 'css', 'sass', 'scss',  'stylus', 'jinja', 'jsx', 'javascript.jsx']


[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html', 'xhtml', 'htmldjango', 'play2-html',  'eruby', 'jinja']

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css', 'scss', 'sass', 'stylus']

[[plugins]]
repo = 'groenewege/vim-less'
on_ft = ['less']

[[plugins]]
repo = 'wavded/vim-stylus'
on_ft = ['stylus']
# }}}

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'kien/rainbow_parentheses.vim'
on_cmd = ['RainbowParenthesesToggle', 'RainbowParenthesesLoadRound', 'RainbowParenthesesLoadBraces', 'RainbowParenthesesActivate']

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
depends = ['osyo-manga/shabadou.vim', 'thinca/vim-quickrun']
on_cmd = ['WatchdogsRun', 'WatchdogsRunSilent', 'QuickRun']
on_map = ['nxo', '<Plug>(quickrun)']
hook_source = '''
    autocmd MyAutoCmd BufWritePost .vimrc,*.vim WatchdogsRunSilent
'''
hook_add = '''
    " default config via http://d.hatena.ne.jp/osyo-manga/20120919/1348054752
    let g:quickrun_config = {
    \    '_': {
    \      'hook/close_buffer/enable_empty_data': 1
    \      , 'hook/inu/enable': 1
    \      , 'hook/inu/wait': 20
    \      , 'outputter/buffer/split': ':botright 8sp'
    \      , 'outputter/error/error': 'quickfix'
    \      , 'outputter/error/success': 'buffer'
    \      , 'runner': 'vimproc'
    \      , 'runner/vimproc/updatetime': 40
    \    },
    \    'run/vimproc': {
    \      'exec': '%s:p:r %a'
    \      , 'output_encode': 'utf-8'
    \      , 'runner': 'vimproc'
    \      , 'outputter': 'buffer'
    \    },
    \    'run/vimproc/pause': {
    \      'exec': '%s:p:r %a && pause'
    \      , 'output_encode': 'utf-8'
    \      , 'runner': 'shell'
    \      , 'outputter': 'buffer'
    \    },
    \    'run/system': {
    \      'exec': '%s:p:r %a'
    \      , 'output_encode': 'utf-8'
    \      , 'runner': 'system'
    \      , 'outputter': 'buffer'
    \    },
    \    'markdown': {
    \      'type': 'markdown/pandoc'
    \      , 'cmdopt': '-s'
    \      , 'outputter': 'browser'
    \    },
    \    'cpp': {
    \      'command': 'clang++'
    \      , 'cmdopt': '-std=c++11 -stdlib=libc++'
    \    },
    \    'watchdogs_checker/go_build': {
    \      'command': 'go'
    \      , 'exec': '%c build %s:p'
    \      , 'quickfix/errorformat': '%f:%l:%m'
    \    },
    \    'go/watchdogs_checker': {
    \      'type': 'watchdogs_checker/go_build'
    \    },
    \   'vim/watchdogs_checker': {
    \     'type': executable('vint') ? 'watchdogs_checker/vint' : '',
    \   },
    \   'watchdogs_checker/vint': {
    \     'command'   : 'vint',
    \     'exec'      : '%c %o %s:p ',
    \   },
    \   'sh/watchdogs_checker': {
    \     'type': executable('shellcheck') ? 'watchdogs_checker/shellcheck' : '',
    \   },
    \   'watchdogs_checker/shellcheck': {
    \     'command'   : 'shellcheck',
    \     'cmdopt': '-f gcc',
    \     'exec'      : '%c %o %s:p ',
    \   },
    \   "javascript.jsx/watchdogs_checker" : {
    \     'type': executable('eslint') ? 'watchdogs_checker/eslint' : '',
    \   },
    \ }

    " 書き込み後にシンタックスチェックを行うかどうか
    let g:watchdogs_check_BufWritePost_enable = 1
    nnoremap <SID>[Show]w :<C-u>WatchdogsRunSilent<CR><Esc>
'''
hook_post_source = '''
    " < http://d.hatena.ne.jp/osyo-manga/20120924/1348473304
    call watchdogs#setup(g:quickrun_config)
'''

[[plugins]]
repo = 'glidenote/memolist.vim'
on_cmd = ['MemoNew', 'MemoList', 'MemoGrep']

# may have an issue with clipboard=unamed ?
# [[plugins]]
# repo = 'LeafCage/yankround.vim'
# on_cmd = ['<Plug>(yankround-']
# hook_add = '''
#  nmap p <Plug>(yankround-p)
#  xmap p <Plug>(yankround-p)
#  nmap P <Plug>(yankround-P)
#  nmap gp <Plug>(yankround-gp)
#  xmap gp <Plug>(yankround-gp)
#  nmap gP <Plug>(yankround-gP)
#  nmap <C-p> <Plug>(yankround-prev)
#  nmap <C-n> <Plug>(yankround-next)
#  nnoremap <silent> <C-y> :<C-u>Unite yankround<CR>
#'''

[[plugins]]
repo = 'LeafCage/vimhelpgenerator'
on_ft = 'vim'
hook_add = '''
  let g:vimhelpgenerator_version = ''
  let g:vimhelpgenerator_author = 'Author : OGURA_Daiki <8hachibee125+vim @ gmail.com>'
  let g:vimhelpgenerator_contents = {
  \ 'contents': 1, 'introduction': 1, 'usage': 1, 'interface': 1,
  \ 'variables': 1, 'commands': 1, 'key-mappings': 1, 'functions': 1,
  \ 'setting': 0, 'todo': 1, 'changelog': 0
  \ }
'''

[[plugins]]
repo = 'glidenote/memolist.vim'

# clan {{{
[[plugins]]
repo = 'vim-jp/cpp-vim'
on_ft = 'cpp'

[[plugins]]
# git submodule add git://github.com/beyondmarc/opengl.vim.git bundle/syntax_opengl
repo = 'Rip-Rip/clang_complete'
on_ft = ['c', 'cpp', 'objc', 'objcpp']
hook_add = '''
  " neocomplcacheとの競合を避けるため、自動呼び出しはOff
  let g:clang_complete_auto = 0
  let g:clang_auto_select = 0
  let g:clang_hl_errors = 0
  "let g:clang_snippets = 'clang_complete'
  "libclangを使う
  let g:clang_use_library = 1
'''


[[plugins]]
repo = 'toyamarinyon/vim-swift'
on_ft = 'swift'
# }}}

# operaor user {{{
[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = ['kana/vim-operator-user']
on_map = ['<Plug>(operator-replace)']
hook_add = '''
  nmap r <Plug>(operator-replace)
'''

[[plugins]]
repo = 'emonkak/vim-operator-comment'
depends = ['kana/vim-operator-user']
on_map = ['<Plug>(operator-uncomment)', '<Plug>(operator-comment)']
hook_add = '''
  omap M <Plug>(operator-uncomment)
  omap m <Plug>(operator-comment)
  vmap M <Plug>(operator-uncomment)
  vmap m <Plug>(operator-comment)
  nmap M <Plug>(operator-uncomment)
  nmap m <Plug>(operator-comment)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = ['kana/vim-operator-user', 'osyo-manga/vim-textobj-multiblock', 'thinca/vim-textobj-between']
on_map = ['<Plug>(operator-surround-']
hook_add = '''
  map <silent>sa <Plug>(operator-surround-append)
  map <silent>sd <Plug>(operator-surround-delete)
  map <silent>sr <Plug>(operator-surround-replace)

  " delete or replace most inner surround
  " if you use vim-textobj-multiblock
  nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
  nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
  " if you use vim-textobj-between
  nmap <silent>sdb <Plug>(operator-surround-delete)<Plug>(textobj-between-a)
  nmap <silent>srb <Plug>(operator-surround-replace)<Plug>(textobj-between-a)
'''

[[plugins]]
repo = 'hachibeeDI/vim-operator-autopep8'
depends = ['kana/vim-operator-user', 'andviro/flake8-vim']
on_ft = ['python']
on_map = '<Plug>(operator-autopep8)'
hook_add = '''
  map ,p <Plug>(operator-autopep8)
'''
# }}}


# textobj-user {{{
[[plugins]]
repo = 'kana/vim-textobj-user'
[[plugins]]
repo = 'kana/vim-textobj-indent'
[[plugins]]
repo = 'kana/vim-textobj-entire'
[[plugins]]
repo = 'kana/vim-textobj-jabraces'
[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = ['kana/vim-textobj-user']
on_map = ['<Plug>(textobj-multiblock-a)', '<Plug>(textobj-multiblock-i)']
hook_add = '''
  omap ab <Plug>(textobj-multiblock-a)
  vmap ab <Plug>(textobj-multiblock-a)
  omap ib <Plug>(textobj-multiblock-i)
  vmap ib <Plug>(textobj-multiblock-i)
'''

[[plugins]]
repo = 'thinca/vim-textobj-between'
depends = ['kana/vim-textobj-user']
on_map = ['<Plug>(textobj-between-a)', '<Plug>(textobj-between-i)']
hook_add = '''
  omap a_ <Plug>(textobj-between-a)
  xmap a_ <Plug>(textobj-between-a)
  omap i_ <Plug>(textobj-between-i)
  xmap i_ <Plug>(textobj-between-i)
'''

[[plugins]]
repo = 'bps/vim-textobj-python'
depends = ['kana/vim-textobj-user']
mappings = ['<Plug>(textobj-python-function']
# }}}

[[plugins]]
repo = 'kana/vim-smartword'
on_map = '<Plug>(smartword-'
hook_add = '''
  " Replace w and others with smartword-mappings
  nmap w  <Plug>(smartword-w)
  nmap b  <Plug>(smartword-b)
  nmap ge  <Plug>(smartword-ge)
  xmap w  <Plug>(smartword-w)
  xmap b  <Plug>(smartword-b)
  " Operator pending mode.
  omap <Leader>w  <Plug>(smartword-w)
  omap <Leader>b  <Plug>(smartword-b)
  omap <Leader>ge  <Plug>(smartword-ge)
'''

[[plugins]]
repo = 'kana/vim-smarttill'
on_map = ['<Plug>(smarttill-']

[[plugins]]
repo = 'koron/codic-vim'
on_cmd = ['Codic']
on_func = 'codic'
on_map = ['<Plug>(operator-codic)']
hook_add = 'map x <Plug>(operator-codic)'

[[plugins]]
repo = 'hachibeeDI/vim-operator-codic'
depends = ['koron/codic-vim', 'kana/vim-operator-user']
on_map = '<Plug>(operator-codic)'


[[plugins]]
repo = 'hashivim/vim-terraform'
hook_add = '''
let g:terraform_align = 1
'''

